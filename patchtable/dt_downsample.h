
/* Generated by dt_downsample.py, do not hand edit */

#ifndef _dt_downsample_h
#define _dt_downsample_h


template<class itype>
void dt_downsample(const Array<itype> &hi_table, Array<itype> &lo_table) {
    if (0) { }
        

    else if (hi_table.sizes.size() == 3) {
        

        vector<vector<int> > hi_max(3);
        vector<int> lo_sizes(3);
        for (int i = 0; i < 3; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

                ASSERT(in_bounds(lo_index2, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                ASSERT(in_bounds(hi_index2, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index2];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index2] = v;
                        goto stop_downsample_3;
                    }
        

                }
            

                }
            

                }
            

                lo_table.data[lo_index2] = TABLE_UNUSED; stop_downsample_3:
(void) (NULL);
        

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 4) {
        

        vector<vector<int> > hi_max(4);
        vector<int> lo_sizes(4);
        for (int i = 0; i < 4; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

                ASSERT(in_bounds(lo_index3, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                ASSERT(in_bounds(hi_index3, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index3];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index3] = v;
                        goto stop_downsample_4;
                    }
        

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index3] = TABLE_UNUSED; stop_downsample_4:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 5) {
        

        vector<vector<int> > hi_max(5);
        vector<int> lo_sizes(5);
        for (int i = 0; i < 5; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

                ASSERT(in_bounds(lo_index4, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_downsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                ASSERT(in_bounds(hi_index4, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index4];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index4] = v;
                        goto stop_downsample_5;
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index4] = TABLE_UNUSED; stop_downsample_5:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 6) {
        

        vector<vector<int> > hi_max(6);
        vector<int> lo_sizes(6);
        for (int i = 0; i < 6; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

                ASSERT(in_bounds(lo_index5, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_downsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_downsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                ASSERT(in_bounds(hi_index5, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index5];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index5] = v;
                        goto stop_downsample_6;
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index5] = TABLE_UNUSED; stop_downsample_6:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 7) {
        

        vector<vector<int> > hi_max(7);
        vector<int> lo_sizes(7);
        for (int i = 0; i < 7; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

                ASSERT(in_bounds(lo_index6, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_downsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_downsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_downsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                ASSERT(in_bounds(hi_index6, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index6];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index6] = v;
                        goto stop_downsample_7;
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index6] = TABLE_UNUSED; stop_downsample_7:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 8) {
        

        vector<vector<int> > hi_max(8);
        vector<int> lo_sizes(8);
        for (int i = 0; i < 8; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

                ASSERT(in_bounds(lo_index7, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_downsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_downsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_downsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_downsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                ASSERT(in_bounds(hi_index7, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index7];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index7] = v;
                        goto stop_downsample_8;
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index7] = TABLE_UNUSED; stop_downsample_8:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 9) {
        

        vector<vector<int> > hi_max(9);
        vector<int> lo_sizes(9);
        for (int i = 0; i < 9; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

                ASSERT(in_bounds(lo_index8, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_downsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_downsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_downsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_downsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_downsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                ASSERT(in_bounds(hi_index8, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index8];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index8] = v;
                        goto stop_downsample_9;
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index8] = TABLE_UNUSED; stop_downsample_9:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 10) {
        

        vector<vector<int> > hi_max(10);
        vector<int> lo_sizes(10);
        for (int i = 0; i < 10; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

            for (int lo_coord9 = 0; lo_coord9 < lo_sizes[9]; lo_coord9++) {
                int lo_index9 = lo_index8 + lo_coord9*lo_table.stride[9];
            

                ASSERT(in_bounds(lo_index9, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_downsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_downsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_downsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_downsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_downsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                int hi_max_9 = hi_max[9][lo_coord9];
                for (int hi_coord9 = lo_coord9*2; hi_coord9 < hi_max_9; hi_coord9++) {
                    ASSERT(in_bounds(hi_coord9, hi_table.sizes[9]), "expected hi_coord9 in bounds in dt_downsample");
                    int hi_index9 = hi_index8 + hi_coord9*hi_table.stride[9];
            

                ASSERT(in_bounds(hi_index9, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index9];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index9] = v;
                        goto stop_downsample_10;
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index9] = TABLE_UNUSED; stop_downsample_10:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 11) {
        

        vector<vector<int> > hi_max(11);
        vector<int> lo_sizes(11);
        for (int i = 0; i < 11; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

            for (int lo_coord9 = 0; lo_coord9 < lo_sizes[9]; lo_coord9++) {
                int lo_index9 = lo_index8 + lo_coord9*lo_table.stride[9];
            

            for (int lo_coord10 = 0; lo_coord10 < lo_sizes[10]; lo_coord10++) {
                int lo_index10 = lo_index9 + lo_coord10*lo_table.stride[10];
            

                ASSERT(in_bounds(lo_index10, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_downsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_downsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_downsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_downsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_downsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                int hi_max_9 = hi_max[9][lo_coord9];
                for (int hi_coord9 = lo_coord9*2; hi_coord9 < hi_max_9; hi_coord9++) {
                    ASSERT(in_bounds(hi_coord9, hi_table.sizes[9]), "expected hi_coord9 in bounds in dt_downsample");
                    int hi_index9 = hi_index8 + hi_coord9*hi_table.stride[9];
            

                int hi_max_10 = hi_max[10][lo_coord10];
                for (int hi_coord10 = lo_coord10*2; hi_coord10 < hi_max_10; hi_coord10++) {
                    ASSERT(in_bounds(hi_coord10, hi_table.sizes[10]), "expected hi_coord10 in bounds in dt_downsample");
                    int hi_index10 = hi_index9 + hi_coord10*hi_table.stride[10];
            

                ASSERT(in_bounds(hi_index10, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index10];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index10] = v;
                        goto stop_downsample_11;
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index10] = TABLE_UNUSED; stop_downsample_11:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 12) {
        

        vector<vector<int> > hi_max(12);
        vector<int> lo_sizes(12);
        for (int i = 0; i < 12; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

            for (int lo_coord9 = 0; lo_coord9 < lo_sizes[9]; lo_coord9++) {
                int lo_index9 = lo_index8 + lo_coord9*lo_table.stride[9];
            

            for (int lo_coord10 = 0; lo_coord10 < lo_sizes[10]; lo_coord10++) {
                int lo_index10 = lo_index9 + lo_coord10*lo_table.stride[10];
            

            for (int lo_coord11 = 0; lo_coord11 < lo_sizes[11]; lo_coord11++) {
                int lo_index11 = lo_index10 + lo_coord11*lo_table.stride[11];
            

                ASSERT(in_bounds(lo_index11, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_downsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_downsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_downsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_downsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_downsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                int hi_max_9 = hi_max[9][lo_coord9];
                for (int hi_coord9 = lo_coord9*2; hi_coord9 < hi_max_9; hi_coord9++) {
                    ASSERT(in_bounds(hi_coord9, hi_table.sizes[9]), "expected hi_coord9 in bounds in dt_downsample");
                    int hi_index9 = hi_index8 + hi_coord9*hi_table.stride[9];
            

                int hi_max_10 = hi_max[10][lo_coord10];
                for (int hi_coord10 = lo_coord10*2; hi_coord10 < hi_max_10; hi_coord10++) {
                    ASSERT(in_bounds(hi_coord10, hi_table.sizes[10]), "expected hi_coord10 in bounds in dt_downsample");
                    int hi_index10 = hi_index9 + hi_coord10*hi_table.stride[10];
            

                int hi_max_11 = hi_max[11][lo_coord11];
                for (int hi_coord11 = lo_coord11*2; hi_coord11 < hi_max_11; hi_coord11++) {
                    ASSERT(in_bounds(hi_coord11, hi_table.sizes[11]), "expected hi_coord11 in bounds in dt_downsample");
                    int hi_index11 = hi_index10 + hi_coord11*hi_table.stride[11];
            

                ASSERT(in_bounds(hi_index11, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index11];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index11] = v;
                        goto stop_downsample_12;
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index11] = TABLE_UNUSED; stop_downsample_12:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 20) {
        

        vector<vector<int> > hi_max(20);
        vector<int> lo_sizes(20);
        for (int i = 0; i < 20; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

            for (int lo_coord9 = 0; lo_coord9 < lo_sizes[9]; lo_coord9++) {
                int lo_index9 = lo_index8 + lo_coord9*lo_table.stride[9];
            

            for (int lo_coord10 = 0; lo_coord10 < lo_sizes[10]; lo_coord10++) {
                int lo_index10 = lo_index9 + lo_coord10*lo_table.stride[10];
            

            for (int lo_coord11 = 0; lo_coord11 < lo_sizes[11]; lo_coord11++) {
                int lo_index11 = lo_index10 + lo_coord11*lo_table.stride[11];
            

            for (int lo_coord12 = 0; lo_coord12 < lo_sizes[12]; lo_coord12++) {
                int lo_index12 = lo_index11 + lo_coord12*lo_table.stride[12];
            

            for (int lo_coord13 = 0; lo_coord13 < lo_sizes[13]; lo_coord13++) {
                int lo_index13 = lo_index12 + lo_coord13*lo_table.stride[13];
            

            for (int lo_coord14 = 0; lo_coord14 < lo_sizes[14]; lo_coord14++) {
                int lo_index14 = lo_index13 + lo_coord14*lo_table.stride[14];
            

            for (int lo_coord15 = 0; lo_coord15 < lo_sizes[15]; lo_coord15++) {
                int lo_index15 = lo_index14 + lo_coord15*lo_table.stride[15];
            

            for (int lo_coord16 = 0; lo_coord16 < lo_sizes[16]; lo_coord16++) {
                int lo_index16 = lo_index15 + lo_coord16*lo_table.stride[16];
            

            for (int lo_coord17 = 0; lo_coord17 < lo_sizes[17]; lo_coord17++) {
                int lo_index17 = lo_index16 + lo_coord17*lo_table.stride[17];
            

            for (int lo_coord18 = 0; lo_coord18 < lo_sizes[18]; lo_coord18++) {
                int lo_index18 = lo_index17 + lo_coord18*lo_table.stride[18];
            

            for (int lo_coord19 = 0; lo_coord19 < lo_sizes[19]; lo_coord19++) {
                int lo_index19 = lo_index18 + lo_coord19*lo_table.stride[19];
            

                ASSERT(in_bounds(lo_index19, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_downsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_downsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_downsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_downsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_downsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                int hi_max_9 = hi_max[9][lo_coord9];
                for (int hi_coord9 = lo_coord9*2; hi_coord9 < hi_max_9; hi_coord9++) {
                    ASSERT(in_bounds(hi_coord9, hi_table.sizes[9]), "expected hi_coord9 in bounds in dt_downsample");
                    int hi_index9 = hi_index8 + hi_coord9*hi_table.stride[9];
            

                int hi_max_10 = hi_max[10][lo_coord10];
                for (int hi_coord10 = lo_coord10*2; hi_coord10 < hi_max_10; hi_coord10++) {
                    ASSERT(in_bounds(hi_coord10, hi_table.sizes[10]), "expected hi_coord10 in bounds in dt_downsample");
                    int hi_index10 = hi_index9 + hi_coord10*hi_table.stride[10];
            

                int hi_max_11 = hi_max[11][lo_coord11];
                for (int hi_coord11 = lo_coord11*2; hi_coord11 < hi_max_11; hi_coord11++) {
                    ASSERT(in_bounds(hi_coord11, hi_table.sizes[11]), "expected hi_coord11 in bounds in dt_downsample");
                    int hi_index11 = hi_index10 + hi_coord11*hi_table.stride[11];
            

                int hi_max_12 = hi_max[12][lo_coord12];
                for (int hi_coord12 = lo_coord12*2; hi_coord12 < hi_max_12; hi_coord12++) {
                    ASSERT(in_bounds(hi_coord12, hi_table.sizes[12]), "expected hi_coord12 in bounds in dt_downsample");
                    int hi_index12 = hi_index11 + hi_coord12*hi_table.stride[12];
            

                int hi_max_13 = hi_max[13][lo_coord13];
                for (int hi_coord13 = lo_coord13*2; hi_coord13 < hi_max_13; hi_coord13++) {
                    ASSERT(in_bounds(hi_coord13, hi_table.sizes[13]), "expected hi_coord13 in bounds in dt_downsample");
                    int hi_index13 = hi_index12 + hi_coord13*hi_table.stride[13];
            

                int hi_max_14 = hi_max[14][lo_coord14];
                for (int hi_coord14 = lo_coord14*2; hi_coord14 < hi_max_14; hi_coord14++) {
                    ASSERT(in_bounds(hi_coord14, hi_table.sizes[14]), "expected hi_coord14 in bounds in dt_downsample");
                    int hi_index14 = hi_index13 + hi_coord14*hi_table.stride[14];
            

                int hi_max_15 = hi_max[15][lo_coord15];
                for (int hi_coord15 = lo_coord15*2; hi_coord15 < hi_max_15; hi_coord15++) {
                    ASSERT(in_bounds(hi_coord15, hi_table.sizes[15]), "expected hi_coord15 in bounds in dt_downsample");
                    int hi_index15 = hi_index14 + hi_coord15*hi_table.stride[15];
            

                int hi_max_16 = hi_max[16][lo_coord16];
                for (int hi_coord16 = lo_coord16*2; hi_coord16 < hi_max_16; hi_coord16++) {
                    ASSERT(in_bounds(hi_coord16, hi_table.sizes[16]), "expected hi_coord16 in bounds in dt_downsample");
                    int hi_index16 = hi_index15 + hi_coord16*hi_table.stride[16];
            

                int hi_max_17 = hi_max[17][lo_coord17];
                for (int hi_coord17 = lo_coord17*2; hi_coord17 < hi_max_17; hi_coord17++) {
                    ASSERT(in_bounds(hi_coord17, hi_table.sizes[17]), "expected hi_coord17 in bounds in dt_downsample");
                    int hi_index17 = hi_index16 + hi_coord17*hi_table.stride[17];
            

                int hi_max_18 = hi_max[18][lo_coord18];
                for (int hi_coord18 = lo_coord18*2; hi_coord18 < hi_max_18; hi_coord18++) {
                    ASSERT(in_bounds(hi_coord18, hi_table.sizes[18]), "expected hi_coord18 in bounds in dt_downsample");
                    int hi_index18 = hi_index17 + hi_coord18*hi_table.stride[18];
            

                int hi_max_19 = hi_max[19][lo_coord19];
                for (int hi_coord19 = lo_coord19*2; hi_coord19 < hi_max_19; hi_coord19++) {
                    ASSERT(in_bounds(hi_coord19, hi_table.sizes[19]), "expected hi_coord19 in bounds in dt_downsample");
                    int hi_index19 = hi_index18 + hi_coord19*hi_table.stride[19];
            

                ASSERT(in_bounds(hi_index19, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index19];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index19] = v;
                        goto stop_downsample_20;
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index19] = TABLE_UNUSED; stop_downsample_20:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
        

    else if (hi_table.sizes.size() == 30) {
        

        vector<vector<int> > hi_max(30);
        vector<int> lo_sizes(30);
        for (int i = 0; i < 30; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            lo_table.resize(lo_sizes);
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

            for (int lo_coord9 = 0; lo_coord9 < lo_sizes[9]; lo_coord9++) {
                int lo_index9 = lo_index8 + lo_coord9*lo_table.stride[9];
            

            for (int lo_coord10 = 0; lo_coord10 < lo_sizes[10]; lo_coord10++) {
                int lo_index10 = lo_index9 + lo_coord10*lo_table.stride[10];
            

            for (int lo_coord11 = 0; lo_coord11 < lo_sizes[11]; lo_coord11++) {
                int lo_index11 = lo_index10 + lo_coord11*lo_table.stride[11];
            

            for (int lo_coord12 = 0; lo_coord12 < lo_sizes[12]; lo_coord12++) {
                int lo_index12 = lo_index11 + lo_coord12*lo_table.stride[12];
            

            for (int lo_coord13 = 0; lo_coord13 < lo_sizes[13]; lo_coord13++) {
                int lo_index13 = lo_index12 + lo_coord13*lo_table.stride[13];
            

            for (int lo_coord14 = 0; lo_coord14 < lo_sizes[14]; lo_coord14++) {
                int lo_index14 = lo_index13 + lo_coord14*lo_table.stride[14];
            

            for (int lo_coord15 = 0; lo_coord15 < lo_sizes[15]; lo_coord15++) {
                int lo_index15 = lo_index14 + lo_coord15*lo_table.stride[15];
            

            for (int lo_coord16 = 0; lo_coord16 < lo_sizes[16]; lo_coord16++) {
                int lo_index16 = lo_index15 + lo_coord16*lo_table.stride[16];
            

            for (int lo_coord17 = 0; lo_coord17 < lo_sizes[17]; lo_coord17++) {
                int lo_index17 = lo_index16 + lo_coord17*lo_table.stride[17];
            

            for (int lo_coord18 = 0; lo_coord18 < lo_sizes[18]; lo_coord18++) {
                int lo_index18 = lo_index17 + lo_coord18*lo_table.stride[18];
            

            for (int lo_coord19 = 0; lo_coord19 < lo_sizes[19]; lo_coord19++) {
                int lo_index19 = lo_index18 + lo_coord19*lo_table.stride[19];
            

            for (int lo_coord20 = 0; lo_coord20 < lo_sizes[20]; lo_coord20++) {
                int lo_index20 = lo_index19 + lo_coord20*lo_table.stride[20];
            

            for (int lo_coord21 = 0; lo_coord21 < lo_sizes[21]; lo_coord21++) {
                int lo_index21 = lo_index20 + lo_coord21*lo_table.stride[21];
            

            for (int lo_coord22 = 0; lo_coord22 < lo_sizes[22]; lo_coord22++) {
                int lo_index22 = lo_index21 + lo_coord22*lo_table.stride[22];
            

            for (int lo_coord23 = 0; lo_coord23 < lo_sizes[23]; lo_coord23++) {
                int lo_index23 = lo_index22 + lo_coord23*lo_table.stride[23];
            

            for (int lo_coord24 = 0; lo_coord24 < lo_sizes[24]; lo_coord24++) {
                int lo_index24 = lo_index23 + lo_coord24*lo_table.stride[24];
            

            for (int lo_coord25 = 0; lo_coord25 < lo_sizes[25]; lo_coord25++) {
                int lo_index25 = lo_index24 + lo_coord25*lo_table.stride[25];
            

            for (int lo_coord26 = 0; lo_coord26 < lo_sizes[26]; lo_coord26++) {
                int lo_index26 = lo_index25 + lo_coord26*lo_table.stride[26];
            

            for (int lo_coord27 = 0; lo_coord27 < lo_sizes[27]; lo_coord27++) {
                int lo_index27 = lo_index26 + lo_coord27*lo_table.stride[27];
            

            for (int lo_coord28 = 0; lo_coord28 < lo_sizes[28]; lo_coord28++) {
                int lo_index28 = lo_index27 + lo_coord28*lo_table.stride[28];
            

            for (int lo_coord29 = 0; lo_coord29 < lo_sizes[29]; lo_coord29++) {
                int lo_index29 = lo_index28 + lo_coord29*lo_table.stride[29];
            

                ASSERT(in_bounds(lo_index29, lo_table.nelems), "expected lo_index in bounds in dt_downsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_downsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_downsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_downsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_downsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_downsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_downsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_downsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_downsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_downsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                int hi_max_9 = hi_max[9][lo_coord9];
                for (int hi_coord9 = lo_coord9*2; hi_coord9 < hi_max_9; hi_coord9++) {
                    ASSERT(in_bounds(hi_coord9, hi_table.sizes[9]), "expected hi_coord9 in bounds in dt_downsample");
                    int hi_index9 = hi_index8 + hi_coord9*hi_table.stride[9];
            

                int hi_max_10 = hi_max[10][lo_coord10];
                for (int hi_coord10 = lo_coord10*2; hi_coord10 < hi_max_10; hi_coord10++) {
                    ASSERT(in_bounds(hi_coord10, hi_table.sizes[10]), "expected hi_coord10 in bounds in dt_downsample");
                    int hi_index10 = hi_index9 + hi_coord10*hi_table.stride[10];
            

                int hi_max_11 = hi_max[11][lo_coord11];
                for (int hi_coord11 = lo_coord11*2; hi_coord11 < hi_max_11; hi_coord11++) {
                    ASSERT(in_bounds(hi_coord11, hi_table.sizes[11]), "expected hi_coord11 in bounds in dt_downsample");
                    int hi_index11 = hi_index10 + hi_coord11*hi_table.stride[11];
            

                int hi_max_12 = hi_max[12][lo_coord12];
                for (int hi_coord12 = lo_coord12*2; hi_coord12 < hi_max_12; hi_coord12++) {
                    ASSERT(in_bounds(hi_coord12, hi_table.sizes[12]), "expected hi_coord12 in bounds in dt_downsample");
                    int hi_index12 = hi_index11 + hi_coord12*hi_table.stride[12];
            

                int hi_max_13 = hi_max[13][lo_coord13];
                for (int hi_coord13 = lo_coord13*2; hi_coord13 < hi_max_13; hi_coord13++) {
                    ASSERT(in_bounds(hi_coord13, hi_table.sizes[13]), "expected hi_coord13 in bounds in dt_downsample");
                    int hi_index13 = hi_index12 + hi_coord13*hi_table.stride[13];
            

                int hi_max_14 = hi_max[14][lo_coord14];
                for (int hi_coord14 = lo_coord14*2; hi_coord14 < hi_max_14; hi_coord14++) {
                    ASSERT(in_bounds(hi_coord14, hi_table.sizes[14]), "expected hi_coord14 in bounds in dt_downsample");
                    int hi_index14 = hi_index13 + hi_coord14*hi_table.stride[14];
            

                int hi_max_15 = hi_max[15][lo_coord15];
                for (int hi_coord15 = lo_coord15*2; hi_coord15 < hi_max_15; hi_coord15++) {
                    ASSERT(in_bounds(hi_coord15, hi_table.sizes[15]), "expected hi_coord15 in bounds in dt_downsample");
                    int hi_index15 = hi_index14 + hi_coord15*hi_table.stride[15];
            

                int hi_max_16 = hi_max[16][lo_coord16];
                for (int hi_coord16 = lo_coord16*2; hi_coord16 < hi_max_16; hi_coord16++) {
                    ASSERT(in_bounds(hi_coord16, hi_table.sizes[16]), "expected hi_coord16 in bounds in dt_downsample");
                    int hi_index16 = hi_index15 + hi_coord16*hi_table.stride[16];
            

                int hi_max_17 = hi_max[17][lo_coord17];
                for (int hi_coord17 = lo_coord17*2; hi_coord17 < hi_max_17; hi_coord17++) {
                    ASSERT(in_bounds(hi_coord17, hi_table.sizes[17]), "expected hi_coord17 in bounds in dt_downsample");
                    int hi_index17 = hi_index16 + hi_coord17*hi_table.stride[17];
            

                int hi_max_18 = hi_max[18][lo_coord18];
                for (int hi_coord18 = lo_coord18*2; hi_coord18 < hi_max_18; hi_coord18++) {
                    ASSERT(in_bounds(hi_coord18, hi_table.sizes[18]), "expected hi_coord18 in bounds in dt_downsample");
                    int hi_index18 = hi_index17 + hi_coord18*hi_table.stride[18];
            

                int hi_max_19 = hi_max[19][lo_coord19];
                for (int hi_coord19 = lo_coord19*2; hi_coord19 < hi_max_19; hi_coord19++) {
                    ASSERT(in_bounds(hi_coord19, hi_table.sizes[19]), "expected hi_coord19 in bounds in dt_downsample");
                    int hi_index19 = hi_index18 + hi_coord19*hi_table.stride[19];
            

                int hi_max_20 = hi_max[20][lo_coord20];
                for (int hi_coord20 = lo_coord20*2; hi_coord20 < hi_max_20; hi_coord20++) {
                    ASSERT(in_bounds(hi_coord20, hi_table.sizes[20]), "expected hi_coord20 in bounds in dt_downsample");
                    int hi_index20 = hi_index19 + hi_coord20*hi_table.stride[20];
            

                int hi_max_21 = hi_max[21][lo_coord21];
                for (int hi_coord21 = lo_coord21*2; hi_coord21 < hi_max_21; hi_coord21++) {
                    ASSERT(in_bounds(hi_coord21, hi_table.sizes[21]), "expected hi_coord21 in bounds in dt_downsample");
                    int hi_index21 = hi_index20 + hi_coord21*hi_table.stride[21];
            

                int hi_max_22 = hi_max[22][lo_coord22];
                for (int hi_coord22 = lo_coord22*2; hi_coord22 < hi_max_22; hi_coord22++) {
                    ASSERT(in_bounds(hi_coord22, hi_table.sizes[22]), "expected hi_coord22 in bounds in dt_downsample");
                    int hi_index22 = hi_index21 + hi_coord22*hi_table.stride[22];
            

                int hi_max_23 = hi_max[23][lo_coord23];
                for (int hi_coord23 = lo_coord23*2; hi_coord23 < hi_max_23; hi_coord23++) {
                    ASSERT(in_bounds(hi_coord23, hi_table.sizes[23]), "expected hi_coord23 in bounds in dt_downsample");
                    int hi_index23 = hi_index22 + hi_coord23*hi_table.stride[23];
            

                int hi_max_24 = hi_max[24][lo_coord24];
                for (int hi_coord24 = lo_coord24*2; hi_coord24 < hi_max_24; hi_coord24++) {
                    ASSERT(in_bounds(hi_coord24, hi_table.sizes[24]), "expected hi_coord24 in bounds in dt_downsample");
                    int hi_index24 = hi_index23 + hi_coord24*hi_table.stride[24];
            

                int hi_max_25 = hi_max[25][lo_coord25];
                for (int hi_coord25 = lo_coord25*2; hi_coord25 < hi_max_25; hi_coord25++) {
                    ASSERT(in_bounds(hi_coord25, hi_table.sizes[25]), "expected hi_coord25 in bounds in dt_downsample");
                    int hi_index25 = hi_index24 + hi_coord25*hi_table.stride[25];
            

                int hi_max_26 = hi_max[26][lo_coord26];
                for (int hi_coord26 = lo_coord26*2; hi_coord26 < hi_max_26; hi_coord26++) {
                    ASSERT(in_bounds(hi_coord26, hi_table.sizes[26]), "expected hi_coord26 in bounds in dt_downsample");
                    int hi_index26 = hi_index25 + hi_coord26*hi_table.stride[26];
            

                int hi_max_27 = hi_max[27][lo_coord27];
                for (int hi_coord27 = lo_coord27*2; hi_coord27 < hi_max_27; hi_coord27++) {
                    ASSERT(in_bounds(hi_coord27, hi_table.sizes[27]), "expected hi_coord27 in bounds in dt_downsample");
                    int hi_index27 = hi_index26 + hi_coord27*hi_table.stride[27];
            

                int hi_max_28 = hi_max[28][lo_coord28];
                for (int hi_coord28 = lo_coord28*2; hi_coord28 < hi_max_28; hi_coord28++) {
                    ASSERT(in_bounds(hi_coord28, hi_table.sizes[28]), "expected hi_coord28 in bounds in dt_downsample");
                    int hi_index28 = hi_index27 + hi_coord28*hi_table.stride[28];
            

                int hi_max_29 = hi_max[29][lo_coord29];
                for (int hi_coord29 = lo_coord29*2; hi_coord29 < hi_max_29; hi_coord29++) {
                    ASSERT(in_bounds(hi_coord29, hi_table.sizes[29]), "expected hi_coord29 in bounds in dt_downsample");
                    int hi_index29 = hi_index28 + hi_coord29*hi_table.stride[29];
            

                ASSERT(in_bounds(hi_index29, hi_table.nelems), "expected hi_index in bounds in dt_downsample");
                

                    itype v = hi_table.data[hi_index29];
                    if (!(v & TABLE_HI_MASK) && v != TABLE_UNUSED) {
                        lo_table.data[lo_index29] = v;
                        goto stop_downsample_30;
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                lo_table.data[lo_index29] = TABLE_UNUSED; stop_downsample_30:
(void) (NULL);
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
        

    else { fprintf(stderr, "dimension unsupported in dt_downsample: %luu\n", hi_table.sizes.size()); ASSERT2(false, "dim unsupported"); }
}
    

template<class itype>
void dt_upsample(const Array<itype> &lo_table, Array<itype> &hi_table) {
    if (0) { }
    

    else if (hi_table.sizes.size() == 3) {
        

        vector<vector<int> > hi_max(3);
        vector<int> lo_sizes(3);
        for (int i = 0; i < 3; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

                ASSERT(in_bounds(lo_index2, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                ASSERT(in_bounds(hi_index2, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index2];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index2] = lo_table.data[lo_index2];
                    }
        

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 4) {
        

        vector<vector<int> > hi_max(4);
        vector<int> lo_sizes(4);
        for (int i = 0; i < 4; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

                ASSERT(in_bounds(lo_index3, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                ASSERT(in_bounds(hi_index3, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index3];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index3] = lo_table.data[lo_index3];
                    }
        

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 5) {
        

        vector<vector<int> > hi_max(5);
        vector<int> lo_sizes(5);
        for (int i = 0; i < 5; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

                ASSERT(in_bounds(lo_index4, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_upsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                ASSERT(in_bounds(hi_index4, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index4];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index4] = lo_table.data[lo_index4];
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 6) {
        

        vector<vector<int> > hi_max(6);
        vector<int> lo_sizes(6);
        for (int i = 0; i < 6; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

                ASSERT(in_bounds(lo_index5, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_upsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_upsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                ASSERT(in_bounds(hi_index5, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index5];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index5] = lo_table.data[lo_index5];
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 7) {
        

        vector<vector<int> > hi_max(7);
        vector<int> lo_sizes(7);
        for (int i = 0; i < 7; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

                ASSERT(in_bounds(lo_index6, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_upsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_upsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_upsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                ASSERT(in_bounds(hi_index6, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index6];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index6] = lo_table.data[lo_index6];
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 8) {
        

        vector<vector<int> > hi_max(8);
        vector<int> lo_sizes(8);
        for (int i = 0; i < 8; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

                ASSERT(in_bounds(lo_index7, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_upsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_upsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_upsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_upsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                ASSERT(in_bounds(hi_index7, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index7];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index7] = lo_table.data[lo_index7];
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 9) {
        

        vector<vector<int> > hi_max(9);
        vector<int> lo_sizes(9);
        for (int i = 0; i < 9; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

                ASSERT(in_bounds(lo_index8, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_upsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_upsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_upsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_upsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_upsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                ASSERT(in_bounds(hi_index8, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index8];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index8] = lo_table.data[lo_index8];
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 10) {
        

        vector<vector<int> > hi_max(10);
        vector<int> lo_sizes(10);
        for (int i = 0; i < 10; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

            for (int lo_coord9 = 0; lo_coord9 < lo_sizes[9]; lo_coord9++) {
                int lo_index9 = lo_index8 + lo_coord9*lo_table.stride[9];
            

                ASSERT(in_bounds(lo_index9, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_upsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_upsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_upsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_upsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_upsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                int hi_max_9 = hi_max[9][lo_coord9];
                for (int hi_coord9 = lo_coord9*2; hi_coord9 < hi_max_9; hi_coord9++) {
                    ASSERT(in_bounds(hi_coord9, hi_table.sizes[9]), "expected hi_coord9 in bounds in dt_upsample");
                    int hi_index9 = hi_index8 + hi_coord9*hi_table.stride[9];
            

                ASSERT(in_bounds(hi_index9, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index9];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index9] = lo_table.data[lo_index9];
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 11) {
        

        vector<vector<int> > hi_max(11);
        vector<int> lo_sizes(11);
        for (int i = 0; i < 11; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

            for (int lo_coord9 = 0; lo_coord9 < lo_sizes[9]; lo_coord9++) {
                int lo_index9 = lo_index8 + lo_coord9*lo_table.stride[9];
            

            for (int lo_coord10 = 0; lo_coord10 < lo_sizes[10]; lo_coord10++) {
                int lo_index10 = lo_index9 + lo_coord10*lo_table.stride[10];
            

                ASSERT(in_bounds(lo_index10, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_upsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_upsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_upsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_upsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_upsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                int hi_max_9 = hi_max[9][lo_coord9];
                for (int hi_coord9 = lo_coord9*2; hi_coord9 < hi_max_9; hi_coord9++) {
                    ASSERT(in_bounds(hi_coord9, hi_table.sizes[9]), "expected hi_coord9 in bounds in dt_upsample");
                    int hi_index9 = hi_index8 + hi_coord9*hi_table.stride[9];
            

                int hi_max_10 = hi_max[10][lo_coord10];
                for (int hi_coord10 = lo_coord10*2; hi_coord10 < hi_max_10; hi_coord10++) {
                    ASSERT(in_bounds(hi_coord10, hi_table.sizes[10]), "expected hi_coord10 in bounds in dt_upsample");
                    int hi_index10 = hi_index9 + hi_coord10*hi_table.stride[10];
            

                ASSERT(in_bounds(hi_index10, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index10];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index10] = lo_table.data[lo_index10];
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 12) {
        

        vector<vector<int> > hi_max(12);
        vector<int> lo_sizes(12);
        for (int i = 0; i < 12; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

            for (int lo_coord9 = 0; lo_coord9 < lo_sizes[9]; lo_coord9++) {
                int lo_index9 = lo_index8 + lo_coord9*lo_table.stride[9];
            

            for (int lo_coord10 = 0; lo_coord10 < lo_sizes[10]; lo_coord10++) {
                int lo_index10 = lo_index9 + lo_coord10*lo_table.stride[10];
            

            for (int lo_coord11 = 0; lo_coord11 < lo_sizes[11]; lo_coord11++) {
                int lo_index11 = lo_index10 + lo_coord11*lo_table.stride[11];
            

                ASSERT(in_bounds(lo_index11, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_upsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_upsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_upsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_upsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_upsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                int hi_max_9 = hi_max[9][lo_coord9];
                for (int hi_coord9 = lo_coord9*2; hi_coord9 < hi_max_9; hi_coord9++) {
                    ASSERT(in_bounds(hi_coord9, hi_table.sizes[9]), "expected hi_coord9 in bounds in dt_upsample");
                    int hi_index9 = hi_index8 + hi_coord9*hi_table.stride[9];
            

                int hi_max_10 = hi_max[10][lo_coord10];
                for (int hi_coord10 = lo_coord10*2; hi_coord10 < hi_max_10; hi_coord10++) {
                    ASSERT(in_bounds(hi_coord10, hi_table.sizes[10]), "expected hi_coord10 in bounds in dt_upsample");
                    int hi_index10 = hi_index9 + hi_coord10*hi_table.stride[10];
            

                int hi_max_11 = hi_max[11][lo_coord11];
                for (int hi_coord11 = lo_coord11*2; hi_coord11 < hi_max_11; hi_coord11++) {
                    ASSERT(in_bounds(hi_coord11, hi_table.sizes[11]), "expected hi_coord11 in bounds in dt_upsample");
                    int hi_index11 = hi_index10 + hi_coord11*hi_table.stride[11];
            

                ASSERT(in_bounds(hi_index11, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index11];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index11] = lo_table.data[lo_index11];
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 20) {
        

        vector<vector<int> > hi_max(20);
        vector<int> lo_sizes(20);
        for (int i = 0; i < 20; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

            for (int lo_coord9 = 0; lo_coord9 < lo_sizes[9]; lo_coord9++) {
                int lo_index9 = lo_index8 + lo_coord9*lo_table.stride[9];
            

            for (int lo_coord10 = 0; lo_coord10 < lo_sizes[10]; lo_coord10++) {
                int lo_index10 = lo_index9 + lo_coord10*lo_table.stride[10];
            

            for (int lo_coord11 = 0; lo_coord11 < lo_sizes[11]; lo_coord11++) {
                int lo_index11 = lo_index10 + lo_coord11*lo_table.stride[11];
            

            for (int lo_coord12 = 0; lo_coord12 < lo_sizes[12]; lo_coord12++) {
                int lo_index12 = lo_index11 + lo_coord12*lo_table.stride[12];
            

            for (int lo_coord13 = 0; lo_coord13 < lo_sizes[13]; lo_coord13++) {
                int lo_index13 = lo_index12 + lo_coord13*lo_table.stride[13];
            

            for (int lo_coord14 = 0; lo_coord14 < lo_sizes[14]; lo_coord14++) {
                int lo_index14 = lo_index13 + lo_coord14*lo_table.stride[14];
            

            for (int lo_coord15 = 0; lo_coord15 < lo_sizes[15]; lo_coord15++) {
                int lo_index15 = lo_index14 + lo_coord15*lo_table.stride[15];
            

            for (int lo_coord16 = 0; lo_coord16 < lo_sizes[16]; lo_coord16++) {
                int lo_index16 = lo_index15 + lo_coord16*lo_table.stride[16];
            

            for (int lo_coord17 = 0; lo_coord17 < lo_sizes[17]; lo_coord17++) {
                int lo_index17 = lo_index16 + lo_coord17*lo_table.stride[17];
            

            for (int lo_coord18 = 0; lo_coord18 < lo_sizes[18]; lo_coord18++) {
                int lo_index18 = lo_index17 + lo_coord18*lo_table.stride[18];
            

            for (int lo_coord19 = 0; lo_coord19 < lo_sizes[19]; lo_coord19++) {
                int lo_index19 = lo_index18 + lo_coord19*lo_table.stride[19];
            

                ASSERT(in_bounds(lo_index19, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_upsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_upsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_upsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_upsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_upsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                int hi_max_9 = hi_max[9][lo_coord9];
                for (int hi_coord9 = lo_coord9*2; hi_coord9 < hi_max_9; hi_coord9++) {
                    ASSERT(in_bounds(hi_coord9, hi_table.sizes[9]), "expected hi_coord9 in bounds in dt_upsample");
                    int hi_index9 = hi_index8 + hi_coord9*hi_table.stride[9];
            

                int hi_max_10 = hi_max[10][lo_coord10];
                for (int hi_coord10 = lo_coord10*2; hi_coord10 < hi_max_10; hi_coord10++) {
                    ASSERT(in_bounds(hi_coord10, hi_table.sizes[10]), "expected hi_coord10 in bounds in dt_upsample");
                    int hi_index10 = hi_index9 + hi_coord10*hi_table.stride[10];
            

                int hi_max_11 = hi_max[11][lo_coord11];
                for (int hi_coord11 = lo_coord11*2; hi_coord11 < hi_max_11; hi_coord11++) {
                    ASSERT(in_bounds(hi_coord11, hi_table.sizes[11]), "expected hi_coord11 in bounds in dt_upsample");
                    int hi_index11 = hi_index10 + hi_coord11*hi_table.stride[11];
            

                int hi_max_12 = hi_max[12][lo_coord12];
                for (int hi_coord12 = lo_coord12*2; hi_coord12 < hi_max_12; hi_coord12++) {
                    ASSERT(in_bounds(hi_coord12, hi_table.sizes[12]), "expected hi_coord12 in bounds in dt_upsample");
                    int hi_index12 = hi_index11 + hi_coord12*hi_table.stride[12];
            

                int hi_max_13 = hi_max[13][lo_coord13];
                for (int hi_coord13 = lo_coord13*2; hi_coord13 < hi_max_13; hi_coord13++) {
                    ASSERT(in_bounds(hi_coord13, hi_table.sizes[13]), "expected hi_coord13 in bounds in dt_upsample");
                    int hi_index13 = hi_index12 + hi_coord13*hi_table.stride[13];
            

                int hi_max_14 = hi_max[14][lo_coord14];
                for (int hi_coord14 = lo_coord14*2; hi_coord14 < hi_max_14; hi_coord14++) {
                    ASSERT(in_bounds(hi_coord14, hi_table.sizes[14]), "expected hi_coord14 in bounds in dt_upsample");
                    int hi_index14 = hi_index13 + hi_coord14*hi_table.stride[14];
            

                int hi_max_15 = hi_max[15][lo_coord15];
                for (int hi_coord15 = lo_coord15*2; hi_coord15 < hi_max_15; hi_coord15++) {
                    ASSERT(in_bounds(hi_coord15, hi_table.sizes[15]), "expected hi_coord15 in bounds in dt_upsample");
                    int hi_index15 = hi_index14 + hi_coord15*hi_table.stride[15];
            

                int hi_max_16 = hi_max[16][lo_coord16];
                for (int hi_coord16 = lo_coord16*2; hi_coord16 < hi_max_16; hi_coord16++) {
                    ASSERT(in_bounds(hi_coord16, hi_table.sizes[16]), "expected hi_coord16 in bounds in dt_upsample");
                    int hi_index16 = hi_index15 + hi_coord16*hi_table.stride[16];
            

                int hi_max_17 = hi_max[17][lo_coord17];
                for (int hi_coord17 = lo_coord17*2; hi_coord17 < hi_max_17; hi_coord17++) {
                    ASSERT(in_bounds(hi_coord17, hi_table.sizes[17]), "expected hi_coord17 in bounds in dt_upsample");
                    int hi_index17 = hi_index16 + hi_coord17*hi_table.stride[17];
            

                int hi_max_18 = hi_max[18][lo_coord18];
                for (int hi_coord18 = lo_coord18*2; hi_coord18 < hi_max_18; hi_coord18++) {
                    ASSERT(in_bounds(hi_coord18, hi_table.sizes[18]), "expected hi_coord18 in bounds in dt_upsample");
                    int hi_index18 = hi_index17 + hi_coord18*hi_table.stride[18];
            

                int hi_max_19 = hi_max[19][lo_coord19];
                for (int hi_coord19 = lo_coord19*2; hi_coord19 < hi_max_19; hi_coord19++) {
                    ASSERT(in_bounds(hi_coord19, hi_table.sizes[19]), "expected hi_coord19 in bounds in dt_upsample");
                    int hi_index19 = hi_index18 + hi_coord19*hi_table.stride[19];
            

                ASSERT(in_bounds(hi_index19, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index19];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index19] = lo_table.data[lo_index19];
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
    

    else if (hi_table.sizes.size() == 30) {
        

        vector<vector<int> > hi_max(30);
        vector<int> lo_sizes(30);
        for (int i = 0; i < 30; i++) {
            lo_sizes[i] = (hi_table.sizes[i]+1)/2;
            for (int lo_coord = 0; lo_coord < lo_sizes[i]; lo_coord++) {
                hi_max[i].push_back(MIN(2*(lo_coord+1), hi_table.sizes[i]));
            }
        }
        

            ASSERT2(lo_table.sizes == lo_sizes, "expected lo_table sizes to match lo_sizes");
            

            for (int lo_coord0 = 0; lo_coord0 < lo_sizes[0]; lo_coord0++) {
                int lo_index0 = 0 + lo_coord0*lo_table.stride[0];
            

            for (int lo_coord1 = 0; lo_coord1 < lo_sizes[1]; lo_coord1++) {
                int lo_index1 = lo_index0 + lo_coord1*lo_table.stride[1];
            

            for (int lo_coord2 = 0; lo_coord2 < lo_sizes[2]; lo_coord2++) {
                int lo_index2 = lo_index1 + lo_coord2*lo_table.stride[2];
            

            for (int lo_coord3 = 0; lo_coord3 < lo_sizes[3]; lo_coord3++) {
                int lo_index3 = lo_index2 + lo_coord3*lo_table.stride[3];
            

            for (int lo_coord4 = 0; lo_coord4 < lo_sizes[4]; lo_coord4++) {
                int lo_index4 = lo_index3 + lo_coord4*lo_table.stride[4];
            

            for (int lo_coord5 = 0; lo_coord5 < lo_sizes[5]; lo_coord5++) {
                int lo_index5 = lo_index4 + lo_coord5*lo_table.stride[5];
            

            for (int lo_coord6 = 0; lo_coord6 < lo_sizes[6]; lo_coord6++) {
                int lo_index6 = lo_index5 + lo_coord6*lo_table.stride[6];
            

            for (int lo_coord7 = 0; lo_coord7 < lo_sizes[7]; lo_coord7++) {
                int lo_index7 = lo_index6 + lo_coord7*lo_table.stride[7];
            

            for (int lo_coord8 = 0; lo_coord8 < lo_sizes[8]; lo_coord8++) {
                int lo_index8 = lo_index7 + lo_coord8*lo_table.stride[8];
            

            for (int lo_coord9 = 0; lo_coord9 < lo_sizes[9]; lo_coord9++) {
                int lo_index9 = lo_index8 + lo_coord9*lo_table.stride[9];
            

            for (int lo_coord10 = 0; lo_coord10 < lo_sizes[10]; lo_coord10++) {
                int lo_index10 = lo_index9 + lo_coord10*lo_table.stride[10];
            

            for (int lo_coord11 = 0; lo_coord11 < lo_sizes[11]; lo_coord11++) {
                int lo_index11 = lo_index10 + lo_coord11*lo_table.stride[11];
            

            for (int lo_coord12 = 0; lo_coord12 < lo_sizes[12]; lo_coord12++) {
                int lo_index12 = lo_index11 + lo_coord12*lo_table.stride[12];
            

            for (int lo_coord13 = 0; lo_coord13 < lo_sizes[13]; lo_coord13++) {
                int lo_index13 = lo_index12 + lo_coord13*lo_table.stride[13];
            

            for (int lo_coord14 = 0; lo_coord14 < lo_sizes[14]; lo_coord14++) {
                int lo_index14 = lo_index13 + lo_coord14*lo_table.stride[14];
            

            for (int lo_coord15 = 0; lo_coord15 < lo_sizes[15]; lo_coord15++) {
                int lo_index15 = lo_index14 + lo_coord15*lo_table.stride[15];
            

            for (int lo_coord16 = 0; lo_coord16 < lo_sizes[16]; lo_coord16++) {
                int lo_index16 = lo_index15 + lo_coord16*lo_table.stride[16];
            

            for (int lo_coord17 = 0; lo_coord17 < lo_sizes[17]; lo_coord17++) {
                int lo_index17 = lo_index16 + lo_coord17*lo_table.stride[17];
            

            for (int lo_coord18 = 0; lo_coord18 < lo_sizes[18]; lo_coord18++) {
                int lo_index18 = lo_index17 + lo_coord18*lo_table.stride[18];
            

            for (int lo_coord19 = 0; lo_coord19 < lo_sizes[19]; lo_coord19++) {
                int lo_index19 = lo_index18 + lo_coord19*lo_table.stride[19];
            

            for (int lo_coord20 = 0; lo_coord20 < lo_sizes[20]; lo_coord20++) {
                int lo_index20 = lo_index19 + lo_coord20*lo_table.stride[20];
            

            for (int lo_coord21 = 0; lo_coord21 < lo_sizes[21]; lo_coord21++) {
                int lo_index21 = lo_index20 + lo_coord21*lo_table.stride[21];
            

            for (int lo_coord22 = 0; lo_coord22 < lo_sizes[22]; lo_coord22++) {
                int lo_index22 = lo_index21 + lo_coord22*lo_table.stride[22];
            

            for (int lo_coord23 = 0; lo_coord23 < lo_sizes[23]; lo_coord23++) {
                int lo_index23 = lo_index22 + lo_coord23*lo_table.stride[23];
            

            for (int lo_coord24 = 0; lo_coord24 < lo_sizes[24]; lo_coord24++) {
                int lo_index24 = lo_index23 + lo_coord24*lo_table.stride[24];
            

            for (int lo_coord25 = 0; lo_coord25 < lo_sizes[25]; lo_coord25++) {
                int lo_index25 = lo_index24 + lo_coord25*lo_table.stride[25];
            

            for (int lo_coord26 = 0; lo_coord26 < lo_sizes[26]; lo_coord26++) {
                int lo_index26 = lo_index25 + lo_coord26*lo_table.stride[26];
            

            for (int lo_coord27 = 0; lo_coord27 < lo_sizes[27]; lo_coord27++) {
                int lo_index27 = lo_index26 + lo_coord27*lo_table.stride[27];
            

            for (int lo_coord28 = 0; lo_coord28 < lo_sizes[28]; lo_coord28++) {
                int lo_index28 = lo_index27 + lo_coord28*lo_table.stride[28];
            

            for (int lo_coord29 = 0; lo_coord29 < lo_sizes[29]; lo_coord29++) {
                int lo_index29 = lo_index28 + lo_coord29*lo_table.stride[29];
            

                ASSERT(in_bounds(lo_index29, lo_table.nelems), "expected lo_index in bounds in dt_upsample");
                

                int hi_max_0 = hi_max[0][lo_coord0];
                for (int hi_coord0 = lo_coord0*2; hi_coord0 < hi_max_0; hi_coord0++) {
                    ASSERT(in_bounds(hi_coord0, hi_table.sizes[0]), "expected hi_coord0 in bounds in dt_upsample");
                    int hi_index0 = 0 + hi_coord0*hi_table.stride[0];
            

                int hi_max_1 = hi_max[1][lo_coord1];
                for (int hi_coord1 = lo_coord1*2; hi_coord1 < hi_max_1; hi_coord1++) {
                    ASSERT(in_bounds(hi_coord1, hi_table.sizes[1]), "expected hi_coord1 in bounds in dt_upsample");
                    int hi_index1 = hi_index0 + hi_coord1*hi_table.stride[1];
            

                int hi_max_2 = hi_max[2][lo_coord2];
                for (int hi_coord2 = lo_coord2*2; hi_coord2 < hi_max_2; hi_coord2++) {
                    ASSERT(in_bounds(hi_coord2, hi_table.sizes[2]), "expected hi_coord2 in bounds in dt_upsample");
                    int hi_index2 = hi_index1 + hi_coord2*hi_table.stride[2];
            

                int hi_max_3 = hi_max[3][lo_coord3];
                for (int hi_coord3 = lo_coord3*2; hi_coord3 < hi_max_3; hi_coord3++) {
                    ASSERT(in_bounds(hi_coord3, hi_table.sizes[3]), "expected hi_coord3 in bounds in dt_upsample");
                    int hi_index3 = hi_index2 + hi_coord3*hi_table.stride[3];
            

                int hi_max_4 = hi_max[4][lo_coord4];
                for (int hi_coord4 = lo_coord4*2; hi_coord4 < hi_max_4; hi_coord4++) {
                    ASSERT(in_bounds(hi_coord4, hi_table.sizes[4]), "expected hi_coord4 in bounds in dt_upsample");
                    int hi_index4 = hi_index3 + hi_coord4*hi_table.stride[4];
            

                int hi_max_5 = hi_max[5][lo_coord5];
                for (int hi_coord5 = lo_coord5*2; hi_coord5 < hi_max_5; hi_coord5++) {
                    ASSERT(in_bounds(hi_coord5, hi_table.sizes[5]), "expected hi_coord5 in bounds in dt_upsample");
                    int hi_index5 = hi_index4 + hi_coord5*hi_table.stride[5];
            

                int hi_max_6 = hi_max[6][lo_coord6];
                for (int hi_coord6 = lo_coord6*2; hi_coord6 < hi_max_6; hi_coord6++) {
                    ASSERT(in_bounds(hi_coord6, hi_table.sizes[6]), "expected hi_coord6 in bounds in dt_upsample");
                    int hi_index6 = hi_index5 + hi_coord6*hi_table.stride[6];
            

                int hi_max_7 = hi_max[7][lo_coord7];
                for (int hi_coord7 = lo_coord7*2; hi_coord7 < hi_max_7; hi_coord7++) {
                    ASSERT(in_bounds(hi_coord7, hi_table.sizes[7]), "expected hi_coord7 in bounds in dt_upsample");
                    int hi_index7 = hi_index6 + hi_coord7*hi_table.stride[7];
            

                int hi_max_8 = hi_max[8][lo_coord8];
                for (int hi_coord8 = lo_coord8*2; hi_coord8 < hi_max_8; hi_coord8++) {
                    ASSERT(in_bounds(hi_coord8, hi_table.sizes[8]), "expected hi_coord8 in bounds in dt_upsample");
                    int hi_index8 = hi_index7 + hi_coord8*hi_table.stride[8];
            

                int hi_max_9 = hi_max[9][lo_coord9];
                for (int hi_coord9 = lo_coord9*2; hi_coord9 < hi_max_9; hi_coord9++) {
                    ASSERT(in_bounds(hi_coord9, hi_table.sizes[9]), "expected hi_coord9 in bounds in dt_upsample");
                    int hi_index9 = hi_index8 + hi_coord9*hi_table.stride[9];
            

                int hi_max_10 = hi_max[10][lo_coord10];
                for (int hi_coord10 = lo_coord10*2; hi_coord10 < hi_max_10; hi_coord10++) {
                    ASSERT(in_bounds(hi_coord10, hi_table.sizes[10]), "expected hi_coord10 in bounds in dt_upsample");
                    int hi_index10 = hi_index9 + hi_coord10*hi_table.stride[10];
            

                int hi_max_11 = hi_max[11][lo_coord11];
                for (int hi_coord11 = lo_coord11*2; hi_coord11 < hi_max_11; hi_coord11++) {
                    ASSERT(in_bounds(hi_coord11, hi_table.sizes[11]), "expected hi_coord11 in bounds in dt_upsample");
                    int hi_index11 = hi_index10 + hi_coord11*hi_table.stride[11];
            

                int hi_max_12 = hi_max[12][lo_coord12];
                for (int hi_coord12 = lo_coord12*2; hi_coord12 < hi_max_12; hi_coord12++) {
                    ASSERT(in_bounds(hi_coord12, hi_table.sizes[12]), "expected hi_coord12 in bounds in dt_upsample");
                    int hi_index12 = hi_index11 + hi_coord12*hi_table.stride[12];
            

                int hi_max_13 = hi_max[13][lo_coord13];
                for (int hi_coord13 = lo_coord13*2; hi_coord13 < hi_max_13; hi_coord13++) {
                    ASSERT(in_bounds(hi_coord13, hi_table.sizes[13]), "expected hi_coord13 in bounds in dt_upsample");
                    int hi_index13 = hi_index12 + hi_coord13*hi_table.stride[13];
            

                int hi_max_14 = hi_max[14][lo_coord14];
                for (int hi_coord14 = lo_coord14*2; hi_coord14 < hi_max_14; hi_coord14++) {
                    ASSERT(in_bounds(hi_coord14, hi_table.sizes[14]), "expected hi_coord14 in bounds in dt_upsample");
                    int hi_index14 = hi_index13 + hi_coord14*hi_table.stride[14];
            

                int hi_max_15 = hi_max[15][lo_coord15];
                for (int hi_coord15 = lo_coord15*2; hi_coord15 < hi_max_15; hi_coord15++) {
                    ASSERT(in_bounds(hi_coord15, hi_table.sizes[15]), "expected hi_coord15 in bounds in dt_upsample");
                    int hi_index15 = hi_index14 + hi_coord15*hi_table.stride[15];
            

                int hi_max_16 = hi_max[16][lo_coord16];
                for (int hi_coord16 = lo_coord16*2; hi_coord16 < hi_max_16; hi_coord16++) {
                    ASSERT(in_bounds(hi_coord16, hi_table.sizes[16]), "expected hi_coord16 in bounds in dt_upsample");
                    int hi_index16 = hi_index15 + hi_coord16*hi_table.stride[16];
            

                int hi_max_17 = hi_max[17][lo_coord17];
                for (int hi_coord17 = lo_coord17*2; hi_coord17 < hi_max_17; hi_coord17++) {
                    ASSERT(in_bounds(hi_coord17, hi_table.sizes[17]), "expected hi_coord17 in bounds in dt_upsample");
                    int hi_index17 = hi_index16 + hi_coord17*hi_table.stride[17];
            

                int hi_max_18 = hi_max[18][lo_coord18];
                for (int hi_coord18 = lo_coord18*2; hi_coord18 < hi_max_18; hi_coord18++) {
                    ASSERT(in_bounds(hi_coord18, hi_table.sizes[18]), "expected hi_coord18 in bounds in dt_upsample");
                    int hi_index18 = hi_index17 + hi_coord18*hi_table.stride[18];
            

                int hi_max_19 = hi_max[19][lo_coord19];
                for (int hi_coord19 = lo_coord19*2; hi_coord19 < hi_max_19; hi_coord19++) {
                    ASSERT(in_bounds(hi_coord19, hi_table.sizes[19]), "expected hi_coord19 in bounds in dt_upsample");
                    int hi_index19 = hi_index18 + hi_coord19*hi_table.stride[19];
            

                int hi_max_20 = hi_max[20][lo_coord20];
                for (int hi_coord20 = lo_coord20*2; hi_coord20 < hi_max_20; hi_coord20++) {
                    ASSERT(in_bounds(hi_coord20, hi_table.sizes[20]), "expected hi_coord20 in bounds in dt_upsample");
                    int hi_index20 = hi_index19 + hi_coord20*hi_table.stride[20];
            

                int hi_max_21 = hi_max[21][lo_coord21];
                for (int hi_coord21 = lo_coord21*2; hi_coord21 < hi_max_21; hi_coord21++) {
                    ASSERT(in_bounds(hi_coord21, hi_table.sizes[21]), "expected hi_coord21 in bounds in dt_upsample");
                    int hi_index21 = hi_index20 + hi_coord21*hi_table.stride[21];
            

                int hi_max_22 = hi_max[22][lo_coord22];
                for (int hi_coord22 = lo_coord22*2; hi_coord22 < hi_max_22; hi_coord22++) {
                    ASSERT(in_bounds(hi_coord22, hi_table.sizes[22]), "expected hi_coord22 in bounds in dt_upsample");
                    int hi_index22 = hi_index21 + hi_coord22*hi_table.stride[22];
            

                int hi_max_23 = hi_max[23][lo_coord23];
                for (int hi_coord23 = lo_coord23*2; hi_coord23 < hi_max_23; hi_coord23++) {
                    ASSERT(in_bounds(hi_coord23, hi_table.sizes[23]), "expected hi_coord23 in bounds in dt_upsample");
                    int hi_index23 = hi_index22 + hi_coord23*hi_table.stride[23];
            

                int hi_max_24 = hi_max[24][lo_coord24];
                for (int hi_coord24 = lo_coord24*2; hi_coord24 < hi_max_24; hi_coord24++) {
                    ASSERT(in_bounds(hi_coord24, hi_table.sizes[24]), "expected hi_coord24 in bounds in dt_upsample");
                    int hi_index24 = hi_index23 + hi_coord24*hi_table.stride[24];
            

                int hi_max_25 = hi_max[25][lo_coord25];
                for (int hi_coord25 = lo_coord25*2; hi_coord25 < hi_max_25; hi_coord25++) {
                    ASSERT(in_bounds(hi_coord25, hi_table.sizes[25]), "expected hi_coord25 in bounds in dt_upsample");
                    int hi_index25 = hi_index24 + hi_coord25*hi_table.stride[25];
            

                int hi_max_26 = hi_max[26][lo_coord26];
                for (int hi_coord26 = lo_coord26*2; hi_coord26 < hi_max_26; hi_coord26++) {
                    ASSERT(in_bounds(hi_coord26, hi_table.sizes[26]), "expected hi_coord26 in bounds in dt_upsample");
                    int hi_index26 = hi_index25 + hi_coord26*hi_table.stride[26];
            

                int hi_max_27 = hi_max[27][lo_coord27];
                for (int hi_coord27 = lo_coord27*2; hi_coord27 < hi_max_27; hi_coord27++) {
                    ASSERT(in_bounds(hi_coord27, hi_table.sizes[27]), "expected hi_coord27 in bounds in dt_upsample");
                    int hi_index27 = hi_index26 + hi_coord27*hi_table.stride[27];
            

                int hi_max_28 = hi_max[28][lo_coord28];
                for (int hi_coord28 = lo_coord28*2; hi_coord28 < hi_max_28; hi_coord28++) {
                    ASSERT(in_bounds(hi_coord28, hi_table.sizes[28]), "expected hi_coord28 in bounds in dt_upsample");
                    int hi_index28 = hi_index27 + hi_coord28*hi_table.stride[28];
            

                int hi_max_29 = hi_max[29][lo_coord29];
                for (int hi_coord29 = lo_coord29*2; hi_coord29 < hi_max_29; hi_coord29++) {
                    ASSERT(in_bounds(hi_coord29, hi_table.sizes[29]), "expected hi_coord29 in bounds in dt_upsample");
                    int hi_index29 = hi_index28 + hi_coord29*hi_table.stride[29];
            

                ASSERT(in_bounds(hi_index29, hi_table.nelems), "expected hi_index in bounds in dt_upsample");
                

                    itype v = hi_table.data[hi_index29];
                    if (v == TABLE_UNUSED) {
                        hi_table.data[hi_index29] = lo_table.data[lo_index29];
                    }
        

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                }
            

                
        

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

            }
            

    }
    

    else { fprintf(stderr, "dimension unsupported in dt_upsample: %lu\n", hi_table.sizes.size()); ASSERT2(false, "dim unsupported"); }
}
    

#endif
    
